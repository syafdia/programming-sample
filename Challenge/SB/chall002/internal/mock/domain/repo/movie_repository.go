// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repo/movie_repository.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/syafdia/sb/chal002/internal/domain/entity"
)

// MockMovieRepository is a mock of MovieRepository interface.
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository.
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance.
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// FindMultipleSummaries mocks base method.
func (m *MockMovieRepository) FindMultipleSummaries(ctx context.Context, searchWord string, pagination int) ([]entity.MovieSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMultipleSummaries", ctx, searchWord, pagination)
	ret0, _ := ret[0].([]entity.MovieSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMultipleSummaries indicates an expected call of FindMultipleSummaries.
func (mr *MockMovieRepositoryMockRecorder) FindMultipleSummaries(ctx, searchWord, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMultipleSummaries", reflect.TypeOf((*MockMovieRepository)(nil).FindMultipleSummaries), ctx, searchWord, pagination)
}

// FindOneDetail mocks base method.
func (m *MockMovieRepository) FindOneDetail(ctx context.Context, imdbID string) (entity.MovieDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneDetail", ctx, imdbID)
	ret0, _ := ret[0].(entity.MovieDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneDetail indicates an expected call of FindOneDetail.
func (mr *MockMovieRepositoryMockRecorder) FindOneDetail(ctx, imdbID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneDetail", reflect.TypeOf((*MockMovieRepository)(nil).FindOneDetail), ctx, imdbID)
}
