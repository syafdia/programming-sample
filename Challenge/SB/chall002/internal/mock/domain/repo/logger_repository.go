// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repo/logger_repository.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/syafdia/sb/chal002/internal/domain/entity"
)

// MockLogRepository is a mock of LogRepository interface.
type MockLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLogRepositoryMockRecorder
}

// MockLogRepositoryMockRecorder is the mock recorder for MockLogRepository.
type MockLogRepositoryMockRecorder struct {
	mock *MockLogRepository
}

// NewMockLogRepository creates a new mock instance.
func NewMockLogRepository(ctrl *gomock.Controller) *MockLogRepository {
	mock := &MockLogRepository{ctrl: ctrl}
	mock.recorder = &MockLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogRepository) EXPECT() *MockLogRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockLogRepository) Insert(ctx context.Context, data entity.LogData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockLogRepositoryMockRecorder) Insert(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockLogRepository)(nil).Insert), ctx, data)
}
