// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecase/find_one_movie_use_case.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/syafdia/sb/chal002/internal/domain/entity"
)

// MockFindOneMovieUseCase is a mock of FindOneMovieUseCase interface.
type MockFindOneMovieUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFindOneMovieUseCaseMockRecorder
}

// MockFindOneMovieUseCaseMockRecorder is the mock recorder for MockFindOneMovieUseCase.
type MockFindOneMovieUseCaseMockRecorder struct {
	mock *MockFindOneMovieUseCase
}

// NewMockFindOneMovieUseCase creates a new mock instance.
func NewMockFindOneMovieUseCase(ctrl *gomock.Controller) *MockFindOneMovieUseCase {
	mock := &MockFindOneMovieUseCase{ctrl: ctrl}
	mock.recorder = &MockFindOneMovieUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFindOneMovieUseCase) EXPECT() *MockFindOneMovieUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockFindOneMovieUseCase) Execute(ctx context.Context, id string) (entity.MovieDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, id)
	ret0, _ := ret[0].(entity.MovieDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockFindOneMovieUseCaseMockRecorder) Execute(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockFindOneMovieUseCase)(nil).Execute), ctx, id)
}
